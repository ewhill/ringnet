"use strict";
// peer.js

var fs = require('fs');
var http = require('http');
var crypto = require('crypto');
var NodeRSA = require('node-rsa');
const EventEmitter = require('events');

var WebSocketServer = require('websocket').server;
var WebSocketClient = require('websocket').client;

const { PeerMessage, PEER_MESSAGE_TYPES, PEER_MESSAGE_STRING } = require('./message.js');

module.exports = class Peer extends EventEmitter {
  
  constructor({
    port            = process.env.DSCVRY_LISTEN || 26781,
    addresses       = [],
    range           = [26780, 26790],
    debug           = false,
    publicKey       = "peer.pub",
    privateKey      = "peer.pem",
    ringPublicKey   = "ring.pub",
    signature       = "peer.signature"
  }) {
    super();
    var self = this;
    
    // Set defaults on self
    self.discoveryAddresses = [];
    self.peers = [];
    self.port = port;
    self.debug = debug;
    self.range = range;
    
    [{ // We require a ring public key to join the network
      description: "Ring Public Key",
      location: ringPublicKey
    }, { // We require a valid signature to join and to validate peers on the network
      description: "Signature",
      location: signature
    }].forEach((f) => {
      if(self.debug)
        console.log(`Checking for ${f.description} at ${f.location}`);
        
      // Make sure we have all the files necessary.
      if(!fs.existsSync(f.location)) {
        throw new Error(`Invalid ${f.description} file location (given: ${f.location}).`);
      }
    });
    
    // Peep the addresses variable for valid, given discovery addresses, adding
    // them to self.discoveryAddresses as we go...
    for(let i=0; i<addresses.length; i++) {
      if(typeof addresses[i] == "string") {
        self.discoveryAddresses.push({
          'address': addresses[i],
          'signature': null
        });
      } else if(typeof addresses[i] == "object" && addresses[i].hasOwnProperty("address")) {
        self.discoveryAddresses.push(addresses[i]);
      }
    }
    
    // If peer private key file exists, then read it. Else, generate private
    self.privateKey = fs.existsSync(privateKey) ?
      new NodeRSA(fs.readFileSync(privateKey)) : new NodeRSA({ b: 2048 });
      
    // If peer public key file exists, then read it. Else, generate public from self.privateKey
    self.publicKey = fs.existsSync(publicKey) ?
      new NodeRSA(fs.readFileSync(publicKey)) : new NodeRSA(self.privateKey.exportKey("public"));
      
    // Read the ringPublicKey (this is required to exist)
    self.ringPublicKey = new NodeRSA(fs.readFileSync(ringPublicKey));
    
    // Read the signature file (this is required to exist)
    self.signature = fs.readFileSync(signature);
    
    // Check to make sure that our signature is verifiable by the ring PUBLIC key
    // In other words, check to make sure the signature was generated by ring PRIVATE key
    // from our peer PUBLIC key. If not, we're probably not going to be allowed on the network
    // so we will have to abort peer creation altogether.
    if(!self.ringPublicKey.verify(self.publicKey.exportKey("public"), self.signature)) {
      throw new Error("Invalid signature for given peer public key and ring public key.");
    }
    
    console.log(`Peer signature (last 50 bytes): ` +
      `\n\t${self.signature.slice(-50).toString("base64")}`);
    
    // Create the httpServer (dummy)
    self.httpServer = http.createServer((request, response) => {
      // process HTTP request. Since we're writing just WebSockets
      // server we don't have to implement anything.
    });
    
    // Start the httpServer on the given port
    self.httpServer.listen(port, () => {
      if(self.debug) console.log(`Server listening on ${port}`);
      self.emit('ready');
    });
    
    // Create the WebSocket server
    self.wsServer = new WebSocketServer({
      'httpServer': self.httpServer
    });
    
    // WebSocket server
    self.wsServer.on('request', (request) => {
      if(self.debug) console.log("New server connection...");
      
      let connection = request.accept(null, request.origin);
      
      self.emit('connection', { connection, request });
      self.setupConnection({ connection, request });
    });
    
    // Catch a trusted, verified 'peers' message (this will be our 
    // lone event catch)
    self.on('message', ({ message, connection }) => {
      if (message.header.type == PEER_MESSAGE_TYPES.peers) {
        // Create and send a verification of trust message
        let peers = new PeerMessage();
        peers.header.type = PEER_MESSAGE_TYPES.peers;
        peers.body = { 'peers': this.getPeerList() };
        peers.header.signature = this.privateKey.sign(JSON.stringify(peers.body));
        
        // Send the message
        connection.sendUTF(peers.toString());
      }
    });
    
    self.discover();
  }
  
  discover() {
    if(!this.discoveryAddresses || this.discoveryAddresses.length < 1) {
      this.emit('discovered');
      return false;
    }
      
    var self = this;
    
    if(self.debug)
      console.log(`Starting discovery on ${self.discoveryAddresses.length} addresses...`);
    
    self.emit('discovering');
    
    // Cycle through our discoveryAddresses array and try to 
    // connect to each potentail peer via WebSocketClient.
    let discoverOne = () => {
      let peerToDiscover = self.discoveryAddresses.splice(0,1)[0];
      
      // next() will be called when we're done discovering on a single
      // address and can move on to the next.
      let next = () => {
        // If we have more addresses in self.discoveryAddresses, keep discovering
        // Else, let's emit the discovered event to show we are done discovering
        if(self.discoveryAddresses.length > 0) discoverOne();
        else self.emit('discovered');
      };
      
      if(self.isConnectedTo(peerToDiscover)) next();
      
      if(self.debug) {
        console.log("------------------------------------------");
        console.log(JSON.stringify(peerToDiscover));
        console.log("------------------------------------------");
      }
      
      let client = new WebSocketClient();
      
      // If we have prefix of "::ffff":, strip it (just means its IPv4)
      peerToDiscover.address = peerToDiscover.address.replace(/^::ffff:(.*)$/i, "$1");
      
      // If 'address' doesn't contain a port and this peer has 
      // a given discovery range, 'self.range', let's expand the address
      // into multiple entries in 'self.discoveryAddresses' for the ports
      // specified in 'self.range'.
      if(!(/^(.*)\:([0-9])+$/i.test(peerToDiscover.address))) {
        if(self.range && Array.isArray(self.range) && self.range.length == 2
          && self.range[0] <= self.range[1]) {
            // Add ports in 'self.range' to the address in question for discovery
            for(let i=self.range[0]; i<=self.range[1]; i++) {
              let d = { 'address': `${peerToDiscover.address}:${i}`, 
                'signature': peerToDiscover.signature };
              if(self.debug) console.log(`\t${JSON.stringify(d)}`);
              if(!self.inDiscoveryAddresses(d) && !self.isConnectedTo(d))
                self.discoveryAddresses.push(d);
            }
        } else {
          // Add the port we listen on to the address in question for discovery
          let d = { 'address': `${peerToDiscover.address}:${self.port}`, 
            'signature': peerToDiscover.signature };
          if(self.debug) console.log(`\t${d}`);
          if(!self.inDiscoveryAddresses(d) && !self.isConnectedTo(d))
            self.discoveryAddresses.push(d);
        }
          
          next();
      }
      
      if(self.debug)
        console.log(`Discovering on ${peerToDiscover.address}`);
      
      client.on('connectFailed', (error) => {
        if(self.debug)
          console.log('Connect Error: ' + error.toString());
        
        next();
      });
      
      client.on('connect', (connection) => {
        if(self.debug) {
          console.log(`Successfully connected to ${connection.remoteAddress}`);
        }
        
        connection.originalAddress = peerToDiscover.address.slice(0);
        
        // Remove the address from our discoveryAddresses array
        // (We don't want to discover on the address twice...)
        // self.discoveryAddresses.splice(self.discoveryAddresses.indexOf(address),1);
        
        //Set up the connection
        self.setupConnection({ connection });
        
        next();
      });
      
      let address = peerToDiscover.address.slice(0,5) == 'ws://' ? 
        peerToDiscover.address : 'ws://' + peerToDiscover.address;
        
      client.connect(address);
    };
    
    discoverOne();
  }
  
  setupConnection({ connection, request=null }) {
    var self = this;
    
    if(self.debug)
      console.log("Peer.setupConnection() invoked");
      
    // We have to have a valid connection to the peer in order to continue
    if(!connection) {
      if(self.debug) {
        console.error("Peer.setupConnection: connection is null or undefined!");
      }
      return false;
    }
    
    // Some initial variables...
    let created = new Date(),
      active = created;
    
    // We CANNOT trust the connection until the HELO handshake takes place
    // and we are able to verify the connection's (peer's) public key
    connection.trusted = false;
    
    connection.connected = true;
    
    if(!connection.hasOwnProperty("originalAddress")) {
      connection.originalAddress = 
        connection.remoteAddress.slice(0).replace(/^::ffff:(.*)$/i, "$1");
    }
    
    if(self.debug && request && request.hasOwnProperty("origin"))
      console.log(`Peer.setupConnection: new peer is ${request.origin}`);
      
    // Add the connection to our list of peers
    self.peers.push({ request, connection, created, active });
    
    // Set up our message receiver event handler for every connection
    connection.on('message', (message) => {
      if(message.type === 'utf8') {
        // Process the WebSocket message via seld.receive
        self.receive({ connection, 'message': message.utf8Data });
      }
    });
    
    // Set up our error event handler for every connection
    connection.on('error', (error) => {
      if(self.debug)
        console.log("Connection Error: " + error.toString());
    });
    
    // Set up our connection close event handler for every connection
    connection.on('close', () => {
      connection.trusted = false;
      connection.active = Date.now();
      if(self.debug) console.log('Connection Closed');
    });
    
    if(self.debug)
      console.log("Peer.setupConnection: sending HELO to connection...");
    
    // Now it's time to perform the HELO handshake to the Connection
    // NOTE: this handshake happens BOTH ways - e.g. a HELO is responded
    // to by a HELO of our own, making the handshake in total.
    try {
      // Send HELO
      var helo = new PeerMessage();
      
      helo.body = {
        // We have to send our public key and public key signature (signed
        // by the ring.pem) to the connection (peer) for validation. The peer
        // will do the same for us, so we can establish trust with one another.
        'publicKey': self.publicKey.exportKey("public"),
        'signature': self.signature.toString('base64')
      };
      
      //Send the message off
      connection.sendUTF(helo.toString());
    } catch(e) {
      // In case of error, log the stack. Most likely, if we're here, it is
      // the result of an export error in NodeRSA (above) or a message send
      // error (connection.sendUTF).
      console.error(e.stack);
    }
  }
  
  receive({ connection, message }) {
    
    if(message) {
      // Convert the message to a PeerMessage class object
      message = new PeerMessage({ message });
    } else {
      // If we weren't supplied a message, let's simply return false.
      return false;
    }
    
    let headerTypeString = PEER_MESSAGE_STRING(message.header.type);
    
    if(this.debug) {
      console.log(`Incoming message '${headerTypeString}' from `+
        `${connection.remoteAddress} - ${connection.originalAddress}`);
    }
    
    if(message.header.type == PEER_MESSAGE_TYPES.helo) {
      // Check that the signature and public key the peer gave us
      // were indeed signed by the same private key that 'this' publicKey
      // was signed with (aka the ring private)...
      var peerPublicKey = false,
        peerPublicKeySignature = false,
        keyIsSigned = false;
      
      try {
        // Generate the NodeRSA key and peerPublicKeySignature from that which 
        // the message (from peer) have provided in it's body.
        peerPublicKey  = new NodeRSA(message.body.publicKey);
        peerPublicKeySignature = new Buffer(message.body.signature, 'base64');
        
        if(this.debug) {
          console.log("\tGot peer public key...");
          console.log("\t\t-> Signature: " + peerPublicKeySignature.slice(-50).toString("base64"));
        }
        
        // Verify the peer's public key...
        keyIsSigned = this.ringPublicKey.verify(message.body.publicKey, peerPublicKeySignature);
        
        if(this.debug) {
          console.log(`\tkeyIsSigned: ${keyIsSigned}`);
        }
      } catch(e) {
        // If we've landed here, it is most likely the result of an error creating 
        // the NodeRSA key from the key in the given peer's message body OR there was
        // an error as a result of calling ringPublicKey.verify.
        console.error("ERROR: The peer's message body could either not be understood " +
          "or not be verified. Exiting now.");
          
        return false;
      }
      
      // Let's check to make sure we have the peerPublicKey, peerPublicKeySignature, and 
      // the signature has been VERIFIED against our copy of ringPublicKey
      if(peerPublicKey && peerPublicKeySignature && keyIsSigned) {
          if(this.debug)
            console.log(`\tPeer at ${connection.remoteAddress} is now TRUSTED.`);
          
          // Set the trusted flag on the connection, and set some other connection variables
          // for use in later communications (AES-256-CBC).
          connection.trusted = true;
          connection.peerPublicKey = peerPublicKey;
          connection.peerPublicKeySignature = peerPublicKeySignature;
          connection.iv = new Buffer(crypto.randomBytes(16));
          connection.key = new Buffer(crypto.randomBytes(32));
          
          // if(this.debug) {
          //   console.log(`\tIV (ours): ${connection.iv.toString('base64')}` + 
          //     `\n\tKEY (ours): ${connection.key.toString('base64')}`);
          // }
          
          // Encrypt the key and iv with the peer's public key which we have as a result of 
          // the (now verified and trusted) HELO
          let encryptedIV = peerPublicKey.encrypt(connection.iv);
          let encryptedKey = peerPublicKey.encrypt(connection.key);
          
          // Create and send a verification of trust message
          let knownPeers = this.getPeerList([ peerPublicKeySignature.toString('base64') ]);
          
          if(this.debug) console.log(JSON.stringify(knownPeers));
          
          let trusted = new PeerMessage();
          trusted.header.type = PEER_MESSAGE_TYPES.trusted;
          trusted.body = {
            'peers': knownPeers, 
            'key': encryptedKey.toString('base64'),
            'iv': encryptedIV.toString('base64')
          };
          trusted.header.signature = this.privateKey.sign(JSON.stringify(trusted.body));
          
          // Send the message
          connection.sendUTF(trusted.toString());
      }
    } else if(connection.trusted) {
      // The connection has been trusted prior to be past this point (post-HELO)
      
      // Check to see if we're receiving a verification of trust message (trusted)
      if(message.header.type == PEER_MESSAGE_TYPES.trusted) {
        // If so, the message needs to have both iv and key properties in order to 
        // upgrade the connection's message encryption scheme to AES-256-CBC as opposed
        // to the RSA encryption used in the handshake.
        if(message.body.hasOwnProperty("iv") && message.body.hasOwnProperty("key")) {
          // We need to try to take the key and iv the peer has given us and decrypt them
          // using our private key (since they were encrypted using our public key post-HELO)
          try {
            let encryptedIV = Buffer.from(message.body.iv, 'base64');
            let encryptedKey = Buffer.from(message.body.key, 'base64');
            
            connection.peerIv = this.privateKey.decrypt(encryptedIV);
            connection.peerKey = this.privateKey.decrypt(encryptedKey);
            
            // if(this.debug) {
            //   console.log(`\tIV (theirs): ${connection.peerIv.toString('base64')}` + 
            //     `\n\tKEY (theirs): ${connection.peerKey.toString('base64')}`);
            // }
          } catch(e) {
            if(this.debug) {
              console.error("ERROR: 'trusted' message received but our private key " +
                "could not decrypt its contents. Exiting now.");
            }
                
            // TODO: Should we add this peer back to discoveryAddresses then? Try again?
            return false;
          }
          
          // Check to see if the verification of trust (trusted) message contains a list
          // of known peers to this peer. This is done for discovery.
          if(message.body.hasOwnProperty("peers")) {
            let lengthBefore = this.discoveryAddresses.length;
            
            for(let i=0; i<message.body.peers.length; i++) {
              // Check for leading '::ffff:', if so, we have IPv4 address and can strip it
              if(message.body.peers[i].address.indexOf("::ffff:") === 0)
                message.body.peers[i].address = message.body.peers[i].address.slice(7);
              
              // If we haven't seen a peer in the list of peers that this peer has given
              // us (wow, what a mouthful!), then add it to our discoveryAddresses array
              // for discovery at a later time
              if(!this.isConnectedTo(message.body.peers[i]) && 
                !this.inDiscoveryAddresses(message.body.peers[i])) {
                  if(this.debug) {
                    console.log(`Peer gave new unknown peer to discover: ` +
                      `${JSON.stringify(message.body.peers[i])}`);
                  }
                  
                  this.discoveryAddresses.push(message.body.peers[i]);
              }
            }
            
            // We now have new peers to explore...
            if(this.discoveryAddresses.length > lengthBefore) {
              this.discover();
            }
          }
        } else {
          if(this.debug)
              console.error("ERROR: 'trusted' message received but message body " +
                "does not contain correct content. Exiting now.");
                
          // TODO: Should we add this peer back to discoveryAddresses then? Try again?
          return false;
        }
        
      } else {
        // Do some sort of 'update' here BUT only if 
        // we haven't already processed the same UPDATE
        // from another peer in the network.
        
        //if(message.header.hash == LAST UPDATE HASH)
        try {
          // if(this.debug) {
          //   console.log(`\tIV (theirs): ${connection.peerIv.toString('base64')}` + 
          //     `\n\tKEY (theirs): ${connection.peerKey.toString('base64')}`);
          // }
          
          // Create an AES-256-CBC decipher to decrypt the message body
          let encryptedMessageBody = Buffer.from(message.body,'base64');
          let messageSignature = Buffer.from(message.header.signature, 'base64');
          
          if(this.debug) {
            console.log(`Message Signature: ${messageSignature.toString('base64')}`);
            console.log(`Encrypted Message Body: ${encryptedMessageBody.toString('base64')}`);  
          }
          
          let decipher = crypto.createDecipheriv('aes-256-cbc', connection.peerKey, connection.peerIv);
          let decryptedMessageBody = (Buffer.concat([decipher.update(encryptedMessageBody), 
            decipher.final()]));
          
          // Check the message's 'signature' header...
          if(connection.peerPublicKey.verify(decryptedMessageBody, messageSignature)) {
            // Parse the decrpyred message body back to JSON now (remember, 
            // pre-encryption by peer it was originally JSON.)
            message.body = JSON.parse(decryptedMessageBody.toString('utf8'));
            
            // Emit the message event so our instantiator can take action
            this.emit('message', { message, connection });
          } else {
            // Signature didn't match, throw error to exit
            throw new Error("ERROR: Message decrypted, but signature could not be verified.");
          }
        } catch(e) {
          if(this.debug) {
            // We're probably here as a result of a decrpytion error or verification error, in 
            // which case the message may have been corrupted. Best to exit gracefully...
            console.error("ERROR: trusted message was received but either could not be decrypted " +
              "with the agreed-upon AES properties or could not be verified using the established " +
              "RSA keys and given message signature.");
              
            console.log(JSON.stringify(message, true));
            console.log(e.stack);
          }
        }
      }
    }
  }

  broadcast({ message }) {
    if(this.debug) console.log(`Peer.broadcast invoked.`);
      
    // If there are no peers to broadcast to, exit
    if(this.peers.length < 1) {
      if(this.debug)
        console.error("ERROR: No peers to broadcast message to. Exiting.");
      return false;
    }
    
    // If there is no message to broadcast, exit
    if(!message || typeof message == 'undefined') {
      if(this.debug)
        console.error("ERROR: No message to broadcast or incorrect messag type. Exiting.");
      return false;
    }
    
    if(this.debug)
      console.log(`Broadcasting ${message} to ${this.peers.length} peers...`);
    
    // If the message is not a string and is not an instance of PeerMessage ...
    if(typeof message !== "string" && 
      !(message instanceof PeerMessage)) {
        // ... stringify it
        try {
          message = JSON.stringify({ message });
        } catch(e) {
          console.error("Unknown message or circular dependency when stringify'ing.");
          return false;
        }
    }
    
    // Broadcast a message to all connected peers
    for(let p of this.peers) {
      if(p.connection.connected) {
        if(p.connection.trusted) {
          // We need to encrypt the message with the connection's AES properties
          let messageCopyToSend = new PeerMessage({ message }); 
          try {
            // Write the signature (signed by OUR RSA private) to the message's header
            messageCopyToSend.header.signature = 
              (this.privateKey.sign(JSON.stringify(messageCopyToSend.body))).toString('base64');
            
            // Encrypt the message body with the connection's aes-256-cbc properties
            let cipher = crypto.createCipheriv('aes-256-cbc', p.connection.key, p.connection.iv);
            let messageBodyBuffer = new Buffer(JSON.stringify(messageCopyToSend.body));
            messageCopyToSend.body = Buffer.concat([cipher.update(messageBodyBuffer), cipher.final()]).toString('base64');
            
            p.connection.sendUTF(JSON.stringify(messageCopyToSend));
          } catch(e) {
            // Something went wrong with the encryption, most likely, so let's
            // gracefully fail and exit...
            if(this.debug) {
              console.error("ERROR: broadcast to TRUSTED connection failed. This could be " +
                "and more likely is due to an encryption error. Exiting now.");
              console.error(e.stack);
            }
          }
        } else {
          // If we do not have a trusted connection, but we are trying to establish one
          // via a HELO handshake, let the message be sent
          if(message.header.type == PEER_MESSAGE_TYPES.helo) {
            p.connection.sendUTF(message);
          } else if(this.debug) {
            console.error("ERROR: broadcast invoked with sensitive message () but " +
              "the connection is not trusted; not sending message.");
          }
        }
      }
    }
    
    // For chaining
    return this;
  }
  
  inDiscoveryAddresses({ address, signature }) {
    for(let i=0; i<this.discoveryAddresses.length; i++) {
      if(this.discoveryAddresses[i].hasOwnProperty("address") &&
        this.discoveryAddresses[i].hasOwnProperty("signature") &&
        this.discoveryAddresses[i].address == address && 
        this.discoveryAddresses[i].signature.toString('base64') == signature) {
          return true;
      }
    }
    
    return false;
  }
  
  isConnectedTo({ address, signature }) {
    for(let i=0; i<this.peers.length; i++) {
      // Check if we're connected to the peer before checking if the peer is
      // the same as the one given. If all the above, return true right away
      if(this.peers[i].connection.hasOwnProperty("peerPublicKeySignature") &&
        this.peers[i].connection.peerPublicKeySignature.toString('base64') == signature) {
          return true;
      }
    }
    
    // We've only reached here as a result of not finding an active connection
    // the same as the one we're given
    return false;
  }
  
  getPeerList(signaturesToOmit) {
    let peerList = [];
    
    if(!signaturesToOmit || !Array.isArray(signaturesToOmit))
      signaturesToOmit = [];
    
    // Add list of our known peers to the body, so that, when
    // received by the other peer, it can discover those addresses
    // as well, creating a fully connected, bidirectional graph (network).
    for(let i=0; i<this.peers.length; i++) {
      if(this.peers[i].connection.hasOwnProperty("peerPublicKeySignature") && 
        this.peers[i].connection.hasOwnProperty("originalAddress")) {
          let peerPublicKeySignatureBase64 = 
            this.peers[i].connection.peerPublicKeySignature.toString('base64');
            
          if(signaturesToOmit.indexOf(peerPublicKeySignatureBase64) < 0) {
            peerList.push({
              'address': this.peers[i].connection.originalAddress,
              //'address': this.peers[i].connection.remoteAddress,
              'signature': peerPublicKeySignatureBase64
            });
          }
      }
    }
    
    return peerList;
  }
  
  toString() {
    return JSON.stringify({
      'discoveryAddresses': this.discoveryAddresses,
      //'peers': this.peers,
      'debug': this.debug,
      'port': this.port,
      'publicKey': this.publicKey,
      'privateKey': this.privateKey,
      
    });
  }
  
};